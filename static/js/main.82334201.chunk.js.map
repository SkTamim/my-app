{"version":3,"sources":["Components/About.js","Components/Alert.js","Components/NavBar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","className","style","id","type","onClick","border","Alert","props","alert","role","message","NavBar","setColor","mode","href","title","to","toggleMode","htmlFor","name","onChange","e","target","value","changeColor","defaultProps","TextForm","text","setText","rows","background","toUpperCase","showAlert","toLowerCase","arr","split","i","length","charAt","slice","capitalizedText","join","fontSize","fontWeight","toFixed","App","setMode","setAlert","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82334201.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  const [btntext, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggleStyle = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: \"1px solid white\",\r\n      });\r\n      setBtnText(\"Enable Light Mode\");\r\n    } else {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setBtnText(\"Enable Dark Mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container' style={myStyle}>\r\n      <h1 className='my-3'>About Us</h1>\r\n      <div className='accordion' id='accordionExample'>\r\n        <div className='accordion-item'>\r\n          <h2 className='accordion-header' id='headingOne'>\r\n            <button\r\n              className='accordion-button'\r\n              type='button'\r\n              style={myStyle}\r\n              data-bs-toggle='collapse'\r\n              data-bs-target='#collapseOne'\r\n              aria-expanded='true'\r\n              aria-controls='collapseOne'\r\n            >\r\n              Analyze Your text\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id='collapseOne'\r\n            className='accordion-collapse collapse show'\r\n            aria-labelledby='headingOne'\r\n            data-bs-parent='#accordionExample'\r\n          >\r\n            <div className='accordion-body' style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='accordion-item' style={myStyle}>\r\n          <h2 className='accordion-header' id='headingTwo'>\r\n            <button\r\n              className='accordion-button collapsed'\r\n              style={myStyle}\r\n              type='button'\r\n              data-bs-toggle='collapse'\r\n              data-bs-target='#collapseTwo'\r\n              aria-expanded='false'\r\n              aria-controls='collapseTwo'\r\n            >\r\n              Free to use\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id='collapseTwo'\r\n            className='accordion-collapse collapse'\r\n            aria-labelledby='headingTwo'\r\n            data-bs-parent='#accordionExample'\r\n          >\r\n            <div className='accordion-body' style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='accordion-item'>\r\n          <h2 className='accordion-header' id='headingThree'>\r\n            <button\r\n              className='accordion-button collapsed'\r\n              style={myStyle}\r\n              type='button'\r\n              data-bs-toggle='collapse'\r\n              data-bs-target='#collapseThree'\r\n              aria-expanded='false'\r\n              aria-controls='collapseThree'\r\n            >\r\n              Browser Compatible\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id='collapseThree'\r\n            className='accordion-collapse collapse'\r\n            aria-labelledby='headingThree'\r\n            data-bs-parent='#accordionExample'\r\n          >\r\n            <div className='accordion-body' style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='container my-3'>\r\n        <button onClick={toggleStyle} type='button' className='btn btn-primary'>\r\n          {btntext}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role='alert'\r\n      >\r\n        <strong>{props.alert.message}</strong>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { BrowserRouter, Link } from \"react-router-dom\";\r\n\r\nfunction NavBar(props) {\r\n  const [color, setColor] = useState();\r\n  const InputEvent = (e) => {\r\n    setColor(e.target.value);\r\n    // console.log(color);\r\n    props.changeColor(color);\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className='container-fluid'>\r\n        <a className='navbar-brand' href='/'>\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className='navbar-toggler'\r\n          type='button'\r\n          data-bs-toggle='collapse'\r\n          data-bs-target='#navbarSupportedContent'\r\n          aria-controls='navbarSupportedContent'\r\n          aria-expanded='false'\r\n          aria-label='Toggle navigation'\r\n        >\r\n          <span className='navbar-toggler-icon'></span>\r\n        </button>\r\n        <div className='collapse navbar-collapse' id='navbarSupportedContent'>\r\n          <ul className='navbar-nav me-auto mb-2 mb-lg-0'>\r\n            <li className='nav-item'>\r\n              <Link className='nav-link active' aria-current='page' to='/'>\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className='nav-item'>\r\n              <Link className='nav-link active' aria-current='page' to='/about'>\r\n                About\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n\r\n          <div className='form-check form-switch'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              id='darkMode'\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className={`form-check-label text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n              htmlFor='darkMode'\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n          <div className='mx-3 d-flex flex-column align-items-center'>\r\n            <label htmlFor='color' className=''>\r\n              Custom Color\r\n            </label>\r\n            <input\r\n              type='color'\r\n              name='color'\r\n              id='color'\r\n              onChange={InputEvent}\r\n              value={color}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavBar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nNavBar.defaultProps = {\r\n  title: \"Brand Name\",\r\n};\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const InputEvent = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const toUpperCase = () => {\r\n    setText(text.toUpperCase());\r\n    props.showAlert(\"Converted to Upper Case\", \"success\");\r\n  };\r\n  const toLowerCase = () => {\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"Converted to Lower Case\", \"success\");\r\n  };\r\n\r\n  const capitalize = () => {\r\n    const arr = text.split(\" \");\r\n    for (var i = 0; i < arr.length; i++) {\r\n      arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n    }\r\n    const capitalizedText = arr.join(\" \");\r\n    setText(capitalizedText);\r\n    props.showAlert(\"Converted to Capitalize\", \"success\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n        <div className='mb-3'>\r\n          <label htmlFor='textBox' className='form-label py-2'>\r\n            Input Text Here\r\n          </label>\r\n          <textarea\r\n            className='form-control'\r\n            id='textBox'\r\n            rows='5'\r\n            onChange={InputEvent}\r\n            value={text}\r\n            style={{\r\n              background: props.mode === \"dark\" ? \"#21272d\" : \"initial\",\r\n              color: props.mode === \"dark\" ? \"#8cb7e4\" : \"initial\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className='btn btn-primary' onClick={toUpperCase}>\r\n          Convert to Upper Case\r\n        </button>\r\n        <button className='btn btn-primary mx-2' onClick={toLowerCase}>\r\n          Convert to Lower Case\r\n        </button>\r\n\r\n        <button className='btn btn-primary my-3' onClick={capitalize}>\r\n          Capitalize\r\n        </button>\r\n\r\n        <div className='container'>\r\n          <h1 className='my-3'>Your text summary</h1>\r\n          <p>\r\n            Number of words in your text is &nbsp;\r\n            <span\r\n              style={{ fontSize: \"25px\", fontWeight: \"bold\" }}\r\n              className='text-danger'\r\n            >\r\n              {text.split(\" \").length - 1}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            Number of characters in your text is &nbsp;\r\n            <span\r\n              style={{ fontSize: \"25px\", fontWeight: \"bold\" }}\r\n              className='text-danger'\r\n            >\r\n              {text.length}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <span\r\n              style={{ fontSize: \"25px\", fontWeight: \"bold\" }}\r\n              className='text-danger'\r\n            >\r\n              {text !== \"\" ? (0.008 * text.split(\" \").length).toFixed(3) : 0}\r\n            </span>\r\n            &nbsp; Minutes to Read\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TextForm;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./Components/About\";\nimport Alert from \"./Components/Alert\";\nimport NavBar from \"./Components/NavBar\";\nimport TextForm from \"./Components/TextForm\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.background = \"black\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark mode has been enebaled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.background = \"initial\";\n      document.body.style.color = \"initial\";\n      showAlert(\"Light mode has been enebaled\", \"success\");\n    }\n  };\n  const changeColor = (color) => {\n    document.body.style.background = color;\n  };\n  return (\n    <>\n      <Router>\n        <NavBar\n          title='Eazily'\n          mode={mode}\n          toggleMode={toggleMode}\n          changeColor={changeColor}\n        />\n        <Alert alert={alert} />\n        <Switch>\n          <Route exact path='/'>\n            <TextForm mode={mode} showAlert={showAlert} />\n          </Route>\n\n          <Route path='/about'>\n            <About />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}